// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models.Data;

#nullable disable

namespace Models.Migrations
{
    [DbContext(typeof(ParkplatzverwaltungContext))]
    partial class ParkplatzverwaltungContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Models.Adressen", b =>
                {
                    b.Property<short>("AdresseId")
                        .HasColumnType("smallint")
                        .HasColumnName("adresse_id");

                    b.Property<string>("Hausnr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("hausnr");

                    b.Property<string>("Land")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("land");

                    b.Property<string>("Ort")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ort");

                    b.Property<int?>("Plz")
                        .HasColumnType("int")
                        .HasColumnName("plz");

                    b.Property<int?>("SchuelerId")
                        .HasColumnType("int")
                        .HasColumnName("schueler_id");

                    b.Property<string>("Strasse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("strasse");

                    b.HasKey("AdresseId");

                    b.HasIndex("SchuelerId")
                        .IsUnique()
                        .HasFilter("[schueler_id] IS NOT NULL");

                    b.HasIndex(new[] { "SchuelerId" }, "IX_adressen_schueler_id")
                        .HasDatabaseName("IX_adressen_schueler_id1");

                    b.ToTable("adressen", (string)null);
                });

            modelBuilder.Entity("Models.Models.Parkplatzantrag", b =>
                {
                    b.Property<int>("ParkplatzantragsId")
                        .HasColumnType("int")
                        .HasColumnName("parkplatzantrags_id");

                    b.Property<DateTime?>("Antragsdatum")
                        .HasColumnType("datetime")
                        .HasColumnName("antragsdatum");

                    b.Property<bool?>("Besonderefall")
                        .HasColumnType("bit")
                        .HasColumnName("besonderefall");

                    b.Property<string>("EntfernungKm")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("entfernung_km");

                    b.Property<string>("Fahrzeit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("fahrzeit");

                    b.Property<bool?>("Genehmigt")
                        .HasColumnType("bit")
                        .HasColumnName("genehmigt");

                    b.Property<string>("Grund")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("grund");

                    b.Property<string>("KfzKennzeichen")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("kfz_kennzeichen");

                    b.Property<bool?>("Mitfahrgelegenheit")
                        .HasColumnType("bit")
                        .HasColumnName("mitfahrgelegenheit");

                    b.Property<string>("Moeglichkeit")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("moeglichkeit");

                    b.Property<int?>("SchuelerId")
                        .HasColumnType("int")
                        .HasColumnName("schueler_id");

                    b.HasKey("ParkplatzantragsId")
                        .HasName("parkplatzantrag_pk");

                    b.HasIndex(new[] { "SchuelerId" }, "IX_parkplatzantrag_schueler_id")
                        .IsUnique()
                        .HasFilter("([schueler_id] IS NOT NULL)");

                    b.ToTable("parkplatzantrag", (string)null);
                });

            modelBuilder.Entity("Models.Models.Schueler", b =>
                {
                    b.Property<int>("SchuelerId")
                        .HasColumnType("int")
                        .HasColumnName("schueler_id");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("KlassenName")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("klassen_name");

                    b.Property<string>("Nachname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nachname");

                    b.Property<string>("Vorname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("vorname");

                    b.HasKey("SchuelerId");

                    b.ToTable("schueler", (string)null);
                });

            modelBuilder.Entity("Models.Models.Adressen", b =>
                {
                    b.HasOne("Models.Models.Schueler", "Schueler")
                        .WithOne("Adresse")
                        .HasForeignKey("Models.Models.Adressen", "SchuelerId")
                        .HasConstraintName("adresse_schueler_null_fk");

                    b.Navigation("Schueler");
                });

            modelBuilder.Entity("Models.Models.Parkplatzantrag", b =>
                {
                    b.HasOne("Models.Models.Schueler", "Schueler")
                        .WithOne("Parkplatzantrag")
                        .HasForeignKey("Models.Models.Parkplatzantrag", "SchuelerId")
                        .HasConstraintName("parkplatzantrag_schueler_null_fk");

                    b.Navigation("Schueler");
                });

            modelBuilder.Entity("Models.Models.Schueler", b =>
                {
                    b.Navigation("Adresse")
                        .IsRequired();

                    b.Navigation("Parkplatzantrag");
                });
#pragma warning restore 612, 618
        }
    }
}
